main:
  steps:
    - init:
        assign:
          - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
          - primary_zone: "us-central1-a"
          - standby_zone: "us-central1-c"
          - start_time: ${sys.now()}
          - remove_ig_operation: null
    
    # Step 1: Stop standby VM
    - stop_standby_vm:
        try:
          call: http.post
          args:
            url: ${"https://compute.googleapis.com/compute/v1/projects/" + project_id + "/zones/" + standby_zone + "/instances/app-web-server-dr-standby/stop"}
            auth:
              type: OAuth2
            timeout: 30
          result: stop_standby_operation
        retry:
          predicate: ${http.default_retry_predicate}
          max_retries: 3
          backoff:
            initial_delay: 2
            max_delay: 10
            multiplier: 2
    
    - wait_for_standby_stop:
        try:
          call: http.get
          args:
            url: ${"https://compute.googleapis.com/compute/v1/projects/" + project_id + "/zones/" + standby_zone + "/operations/" + stop_standby_operation.body.name}
            auth:
              type: OAuth2
            timeout: 30
          result: stop_standby_status
        retry:
          predicate: ${http.default_retry_predicate}
          max_retries: 3
          backoff:
            initial_delay: 1
            max_delay: 5
            multiplier: 2
    
    - check_standby_stop_done:
        switch:
          - condition: ${stop_standby_status.body.status != "DONE"}
            next: sleep_then_check_standby_stop
        next: detach_regional_disk
    
    - sleep_then_check_standby_stop:
        call: sys.sleep
        args:
          seconds: 5
        next: wait_for_standby_stop
    
    # Step 2: Detach regional disk from standby VM
    - detach_regional_disk:
        try:
          call: http.post
          args:
            url: ${"https://compute.googleapis.com/compute/v1/projects/" + project_id + "/zones/" + standby_zone + "/instances/app-web-server-dr-standby/detachDisk"}
            auth:
              type: OAuth2
            timeout: 30
            body:
              deviceName: "app-data-disk"
          result: detach_operation
        retry:
          predicate: ${http.default_retry_predicate}
          max_retries: 3
          backoff:
            initial_delay: 2
            max_delay: 10
            multiplier: 2
    
    - wait_for_detach:
        try:
          call: http.get
          args:
            url: ${"https://compute.googleapis.com/compute/v1/projects/" + project_id + "/zones/" + standby_zone + "/operations/" + detach_operation.body.name}
            auth:
              type: OAuth2
            timeout: 30
          result: detach_status
        retry:
          predicate: ${http.default_retry_predicate}
          max_retries: 3
          backoff:
            initial_delay: 1
            max_delay: 5
            multiplier: 2
    
    - check_detach_done:
        switch:
          - condition: ${detach_status.body.status != "DONE"}
            next: sleep_then_check_detach
        next: start_primary_vm
    
    - sleep_then_check_detach:
        call: sys.sleep
        args:
          seconds: 5
        next: wait_for_detach
    
    # Step 3: Start primary VM
    - start_primary_vm:
        try:
          call: http.post
          args:
            url: ${"https://compute.googleapis.com/compute/v1/projects/" + project_id + "/zones/" + primary_zone + "/instances/app-web-server-dr-primary/start"}
            auth:
              type: OAuth2
            timeout: 30
          result: start_operation
        retry:
          predicate: ${http.default_retry_predicate}
          max_retries: 3
          backoff:
            initial_delay: 2
            max_delay: 10
            multiplier: 2
    
    - wait_for_start:
        try:
          call: http.get
          args:
            url: ${"https://compute.googleapis.com/compute/v1/projects/" + project_id + "/zones/" + primary_zone + "/operations/" + start_operation.body.name}
            auth:
              type: OAuth2
            timeout: 30
          result: start_status
        retry:
          predicate: ${http.default_retry_predicate}
          max_retries: 3
          backoff:
            initial_delay: 1
            max_delay: 5
            multiplier: 2
    
    - check_start_done:
        switch:
          - condition: ${start_status.body.status != "DONE"}
            next: sleep_then_check_start
        next: attach_regional_disk
    
    - sleep_then_check_start:
        call: sys.sleep
        args:
          seconds: 5
        next: wait_for_start
    
    # Step 4: Attach regional disk to primary VM
    - attach_regional_disk:
        try:
          call: http.post
          args:
            url: ${"https://compute.googleapis.com/compute/v1/projects/" + project_id + "/zones/" + primary_zone + "/instances/app-web-server-dr-primary/attachDisk"}
            auth:
              type: OAuth2
            timeout: 30
            body:
              source: ${"projects/" + project_id + "/regions/us-central1/disks/app-regional-disk"}
              deviceName: "app-data-disk"
              mode: "READ_WRITE"
          result: attach_regional_operation
        retry:
          predicate: ${http.default_retry_predicate}
          max_retries: 3
          backoff:
            initial_delay: 2
            max_delay: 10
            multiplier: 2
    
    - wait_for_regional_attach:
        try:
          call: http.get
          args:
            url: ${"https://compute.googleapis.com/compute/v1/projects/" + project_id + "/zones/" + primary_zone + "/operations/" + attach_regional_operation.body.name}
            auth:
              type: OAuth2
            timeout: 30
          result: attach_regional_status
        retry:
          predicate: ${http.default_retry_predicate}
          max_retries: 3
          backoff:
            initial_delay: 1
            max_delay: 5
            multiplier: 2
    
    - check_regional_attach_done:
        switch:
          - condition: ${attach_regional_status.body.status != "DONE"}
            next: sleep_then_check_regional_attach
        next: wait_for_initialization
    
    - sleep_then_check_regional_attach:
        call: sys.sleep
        args:
          seconds: 5
        next: wait_for_regional_attach
    
    # Step 5: Wait for application to initialize
    - wait_for_initialization:
        call: sys.sleep
        args:
          seconds: 30
    
    # Step 6: Remove standby VM from instance group
    - remove_from_instance_group:
        try:
          call: http.post
          args:
            url: ${"https://compute.googleapis.com/compute/v1/projects/" + project_id + "/zones/" + standby_zone + "/instanceGroups/app-standby-group/removeInstances"}
            auth:
              type: OAuth2
            timeout: 30
            body:
              instances:
                - instance: ${"projects/" + project_id + "/zones/" + standby_zone + "/instances/app-web-server-dr-standby"}
          result: remove_ig_operation
        except:
          as: e
          steps:
            - log_remove_error:
                call: sys.log
                args:
                  text: 'Failed to remove from instance group'
                  severity: "WARNING"
        retry:
          predicate: ${http.default_retry_predicate}
          max_retries: 3
          backoff:
            initial_delay: 2
            max_delay: 10
            multiplier: 2
    
    - check_remove_ig_result:
        switch:
          - condition: ${remove_ig_operation != null}
            next: wait_for_remove_ig
        next: calculate_rto
    
    - wait_for_remove_ig:
        try:
          call: http.get
          args:
            url: ${"https://compute.googleapis.com/compute/v1/projects/" + project_id + "/zones/" + standby_zone + "/operations/" + remove_ig_operation.body.name}
            auth:
              type: OAuth2
            timeout: 30
          result: remove_ig_status
        retry:
          predicate: ${http.default_retry_predicate}
          max_retries: 3
          backoff:
            initial_delay: 1
            max_delay: 5
            multiplier: 2
    
    - check_remove_ig_done:
        switch:
          - condition: ${remove_ig_status.body.status != "DONE"}
            next: sleep_then_check_remove_ig
        next: calculate_rto
    
    - sleep_then_check_remove_ig:
        call: sys.sleep
        args:
          seconds: 5
        next: wait_for_remove_ig
    
    # Step 7: Calculate RTO and return results
    - calculate_rto:
        assign:
          - end_time: ${sys.now()}
          - rto_seconds: ${(end_time - start_time) / 1000}
    
    - write_metric:
        try:
          call: http.post
          args:
            url: ${"https://monitoring.googleapis.com/v3/projects/" + project_id + "/timeSeries"}
            auth:
              type: OAuth2
            timeout: 30
            body:
              timeSeries:
                - metric:
                    type: "custom.googleapis.com/dr/recovery_time_objective"
                    labels:
                      operation: "failback"
                  resource:
                    type: "global"
                    labels:
                      project_id: ${project_id}
                  points:
                    - interval:
                        endTime: ${sys.now()}
                      value:
                        doubleValue: ${rto_seconds}
        except:
          as: e
          steps:
            - log_metric_error:
                call: sys.log
                args:
                  text: 'Failed to write metric'
                  severity: "WARNING"
        retry:
          predicate: ${http.default_retry_predicate}
          max_retries: 3
          backoff:
            initial_delay: 2
            max_delay: 10
            multiplier: 2
    
    - return_result:
        return:
          status: "success"
          rto_seconds: ${rto_seconds}
          message: "Failback completed successfully"
